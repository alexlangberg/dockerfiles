# stack.yml

version: '3.6'

networks:
  traefik-net:
    driver: overlay

services:
  traefik:
    image: traefik:v1.6.2
    hostname: "${SERVICE_HOSTNAME_TEMPLATE}"
    deploy:
      # Make sure it only runs once and only on the manager.
      # Can always be scaled up with KV store (for ACME) later.
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        window: 15s
      labels:
        traefik.enable: "true"
        traefik.backend: "traefik"
        traefik.port: "8080"
        traefik.frontend.rule: "Host:${HOST_TRAEFIK}"
        traefik.frontend.auth.basic: "${TRAEFIK_BASIC_AUTH_CREDENTIALS}"
    networks:
      - traefik-net
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${TRAEFIK_CONFIG_FILE}:/etc/traefik/traefik.toml
      - ${TRAEFIK_ACME_FILE}:/acme.json
    command:
      - "--api"
      - "--retry"
      - "--docker"
      - "--docker.watch"
      - "--docker.endpoint=unix:///var/run/docker.sock"
      - "--docker.exposedbydefault=false"
      - "--docker.domain=${HOST_DOMAIN}"
      - "--docker.swarmMode"

  netdata:
    image: netdata/netdata
    hostname: "${SERVICE_HOSTNAME_TEMPLATE}"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - PGID=${DOCKER_GROUP_ID}
    networks:
      - traefik-net
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        window: 15s
      labels:
        traefik.enable: "true"
        traefik.port: "19999"
        traefik.frontend.rule: "Host:${HOST_NETDATA}"
        traefik.frontend.auth.basic: "${TRAEFIK_BASIC_AUTH_CREDENTIALS}"

  website:
    image: "alexlangberg/website"
    hostname: "${SERVICE_HOSTNAME_TEMPLATE}"
    networks:
      - traefik-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        window: 15s
      labels:
        traefik.enable: "true"
        traefik.port: "80"
        traefik.frontend.rule: "Host:${HOST_WEBSITE}"
        traefik.frontend.redirect.regex: "^https?://www.${HOST_DOMAIN}/(.*)"
        traefik.frontend.redirect.replacement: "${HOST_REDIRECT_REPLACE}/$${1}"

  feed2json:
    image: "alexlangberg/feed2json-server"
    hostname: "${SERVICE_HOSTNAME_TEMPLATE}"
    networks:
      - traefik-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        window: 15s
      labels:
        traefik.enable: "true"
        traefik.port: "4201"
        traefik.frontend.rule: "Host:${HOST_FEED2JSON}"

  feedmixer:
    image: "alexlangberg/feedmixer:dev"
    hostname: "${SERVICE_HOSTNAME_TEMPLATE}"
    networks:
      - traefik-net
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        window: 15s
      labels:
        traefik.enable: "true"
        traefik.port: "80"
        traefik.frontend.rule: "Host:${HOST_FEEDMIXER}"
